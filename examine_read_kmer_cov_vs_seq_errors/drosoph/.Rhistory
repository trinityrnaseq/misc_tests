counts_1ms_bin_mag10 = counts_by_time %>% filter(magnitude==10)
counts_1ms_bin_mag15 = counts_by_time %>% filter(magnitude==15)
ms_time_bins[counts_1ms_bin_mag5$spiketime_ms,"mag5"] = counts_1ms_bin_mag5$n
ms_time_bins[counts_1ms_bin_mag10$spiketime_ms,"mag10"] = counts_1ms_bin_mag10$n
ms_time_bins[counts_1ms_bin_mag15$spiketime_ms,"mag15"] = counts_1ms_bin_mag15$n
ms_time_bins_t = as.tibble(ms_time_bins)
ms_time_bins_t$time_ms = 1:max_ms
ms_time_bins_t = ms_time_bins_t %>% gather(mag, count, -time_ms)
ms_time_bins_t$magval = 0
ms_time_bins_t = ms_time_bins_t %>% mutate(magval= ifelse(mag=='mag5', 5, magval ))
ms_time_bins_t = ms_time_bins_t %>% mutate(magval= ifelse(mag=='mag10', 10, magval ))
ms_time_bins_t = ms_time_bins_t %>% mutate(magval= ifelse(mag=='mag15', 15, magval ))
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms, family='poisson')
summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(time_ms,1), family='poisson')
mod
summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(time_ms,1), family='poisson'); summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(time_ms,2), family='poisson'); summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(time_ms,3), family='poisson'); summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(time_ms,4), family='poisson'); summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(time_ms,5), family='poisson'); summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms, family='poisson'); summary(mod)
dplyr::lag(time_ms, 1)
with(ms_time_bins_t) dplyr::lag(time_ms, 1)
with(ms_time_bins_t),  dplyr::lag(time_ms, 1)
dplyr::lag(ms_time_bins_t$time_ms, 1)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms, family='poisson'); summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1), family='poisson'); summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2), family='poisson'); summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + dplyr::lag(ms_time_bins_t$time_ms, 2), family='poisson'); summary(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1), family='poisson'); summary(mod)
aic(mod)
AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms, family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 3), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 4), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 5), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 6), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 7), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 8), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 9), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 10), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 11), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 12), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 13), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 14), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 15), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 16), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 17), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 18), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 19), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 20), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 21), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 22), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 0), family='poisson'); summary(mod); AIC(mod)
ms_time_bins_t
resid(mod)
ms_time_bins_t$resid = resid(mod)
mod = glm(data=ms_time_bins_t, formula = resid ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 0), family='poisson'); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = resid ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 0)); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = resid ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1)); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = resid ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2)); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = resid ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 3)); summary(mod); AIC(mod)
plot(ms_time_bins_t$resid)
head(ms_time_bins_t)
plot(ms_time_bins_t$time_ms, ms_time_bins_t$resid)
plot(ms_time_bins_t$time_ms, ms_time_bins_t$resid, t='l')
plot(ms_time_bins_t$time_ms, ms_time_bins_t$resid, t='l', xlim=c(100,120))
mod = glm(data=ms_time_bins_t, formula = resid ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1)); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = resid ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = resid ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2)); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2)) + + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 3); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2)) +  time_ms + dplyr::lag(ms_time_bins_t$time_ms, 3); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2)); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2) + dplyr::lag(ms_time_bins_t$time_ms, 3)); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2) + dplyr::lag(ms_time_bins_t$time_ms, 3) + dplyr::lag(ms_time_bins_t$time_ms, 4)); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2) + dplyr::lag(ms_time_bins_t$time_ms, 3) + dplyr::lag(ms_time_bins_t$time_ms, 4) + dplyr::lag(ms_time_bins_t$time_ms, 5)); summary(mod); AIC(mod)
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 1) + time_ms + dplyr::lag(ms_time_bins_t$time_ms, 2) + dplyr::lag(ms_time_bins_t$time_ms, 3) + dplyr::lag(ms_time_bins_t$time_ms, 4) + dplyr::lag(ms_time_bins_t$time_ms, 5) + dplyr::lag(ms_time_bins_t$time_ms, 6)); summary(mod); AIC(mod)
mag15
mod = glm(data=mag15, formula=count ~ time_ms, family="poisson")
summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms, family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 1), family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 2), family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 3), family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 4), family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 5), family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 6), family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 1), family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 1) + dplyr::lag(mag15$count, 2), family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 1) + dplyr::lag(mag15$count, 2) + dplyr::lag(mag15$count, 3), family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 1) + dplyr::lag(mag15$count, 2) + dplyr::lag(mag15$count, 3) + dplyr::lag(mag15$count, 4), family="poisson"); summary(mod)
mod = glm(data=mag15, formula=count ~ time_ms + dplyr::lag(mag15$count, 1) + dplyr::lag(mag15$count, 2) + dplyr::lag(mag15$count, 3) + dplyr::lag(mag15$count, 4) + dplyr::lag(mag15$count, 5), family="poisson"); summary(mod)
mod = glm(data=mag10, formula=count ~ time_ms + dplyr::lag(mag10$count, 1) + dplyr::lag(mag10$count, 2) + dplyr::lag(mag10$count, 3) + dplyr::lag(mag10$count, 4) + dplyr::lag(mag10$count, 5), family="poisson"); summary(mod)
mod = glm(data=mag5, formula=count ~ time_ms + dplyr::lag(mag5$count, 1) + dplyr::lag(mag5$count, 2) + dplyr::lag(mag5$count, 3) + dplyr::lag(mag5$count, 4) + dplyr::lag(mag5$count, 5), family="poisson"); summary(mod)
mod = glm(data=mag5, formula=count ~ time_ms + dplyr::lag(mag5$count, 1) + dplyr::lag(mag5$count, 2) + dplyr::lag(mag5$count, 3) + dplyr::lag(mag5$count, 4) + dplyr::lag(mag5$count, 5), family="poisson"); summary(mod)
mod = glm(data=mag5, formula=count ~ mag + time_ms + dplyr::lag(mag5$count, 1) + dplyr::lag(mag5$count, 2) + dplyr::lag(mag5$count, 3) + dplyr::lag(mag5$count, 4) + dplyr::lag(mag5$count, 5), family="poisson"); summary(mod)
ms = ms_time_bins_t
mod = glm(data=ms, formula=count ~ mag + time_ms + dplyr::lag(ms$count, 1) + dplyr::lag(ms$count, 2) + dplyr::lag(ms$count, 3) + dplyr::lag(ms$count, 4) + dplyr::lag(ms$count, 5), family="poisson"); summary(mod)
mod = glm(data=ms, formula=count ~ mag + time_ms + dplyr::lag(ms$count, 1) + dplyr::lag(ms$count, 2) + dplyr::lag(ms$count, 3) + dplyr::lag(ms$count, 4) + dplyr::lag(ms$count, 5), family="poisson"); summary(mod)
ms
mod = glm(data=ms, formula=count ~ magval + time_ms + dplyr::lag(ms$count, 1) + dplyr::lag(ms$count, 2) + dplyr::lag(ms$count, 3) + dplyr::lag(ms$count, 4) + dplyr::lag(ms$count, 5), family="poisson"); summary(mod)
ms_time_bins_t %>% ggplot(aes(x=time_ms, y=resid, color=mag)) + geom_line() + scale_x_continuous(limits = c(250, 270))
mod = glm(data=ms_time_bins_t, formula=count ~ magval +
time_ms + dplyr::lag(ms_time_bins_t$count, 1) +
dplyr::lag(ms_time_bins_t$count, 2) +
dplyr::lag(ms_time_bins_t$count, 3) +
dplyr::lag(ms_time_bins_t$count, 4) +
dplyr::lag(ms_time_bins_t$count, 5), family="poisson");
summary(mod)
mod$residuals
acf(mod$residuals)
pacf(mod$residuals)
# convert to counts per ms bin
counts_by_time = origdata %>% mutate(spiketime_ms = round(spiketime*1000)) %>%
group_by(magnitude, spiketime_ms) %>% tally()
max_ms = max(counts_by_time$spiketime_ms)
ms_time_bins = matrix(nrow=max_ms, ncol=3, data=0)
colnames(ms_time_bins) = c('mag5', 'mag10', 'mag15')
counts_1ms_bin_mag5 = counts_by_time %>% filter(magnitude==5)
counts_1ms_bin_mag10 = counts_by_time %>% filter(magnitude==10)
counts_1ms_bin_mag15 = counts_by_time %>% filter(magnitude==15)
ms_time_bins[counts_1ms_bin_mag5$spiketime_ms,"mag5"] = counts_1ms_bin_mag5$n
ms_time_bins[counts_1ms_bin_mag10$spiketime_ms,"mag10"] = counts_1ms_bin_mag10$n
ms_time_bins[counts_1ms_bin_mag15$spiketime_ms,"mag15"] = counts_1ms_bin_mag15$n
ms_time_bins_t = as.tibble(ms_time_bins)
ms_time_bins_t$time_ms = 1:max_ms
ms_time_bins_t = ms_time_bins_t %>% gather(mag, count, -time_ms)
ms_time_bins_t$magval = 0
ms_time_bins_t = ms_time_bins_t %>% mutate(magval= ifelse(mag=='mag5', 5, magval ))
ms_time_bins_t = ms_time_bins_t %>% mutate(magval= ifelse(mag=='mag10', 10, magval ))
ms_time_bins_t = ms_time_bins_t %>% mutate(magval= ifelse(mag=='mag15', 15, magval ))
mod = glm(data=ms_time_bins_t, formula = count ~ magval + time_ms, family='poisson')
summary(mod)
pacf(mod$residuals)
acf(mod$residuals)
acf(mod$residuals)
pacf(mod$residuals)
ms_time_bins_t %>% ggplot(aes(x=time_ms, y=resid, color=mag)) + geom_line() + scale_x_continuous(limits = c(250, 270))
acf(mod$residuals)
pacf(mod$residuals)
mod2 = glm(data=ms_time_bins_t, formula=count ~ magval +
time_ms + dplyr::lag(ms_time_bins_t$count, 1) +
dplyr::lag(ms_time_bins_t$count, 2) +
dplyr::lag(ms_time_bins_t$count, 3) +
dplyr::lag(ms_time_bins_t$count, 4) +
dplyr::lag(ms_time_bins_t$count, 5), family="poisson");
summary(mod2)
acf(mod$residuals)
pacf(mod$residuals)
mod2 = glm(data=ms_time_bins_t, formula=count ~ magval +
time_ms + dplyr::lag(ms_time_bins_t$count, 1) +
dplyr::lag(ms_time_bins_t$count, 2) +
dplyr::lag(ms_time_bins_t$count, 3) +
dplyr::lag(ms_time_bins_t$count, 4) +
dplyr::lag(ms_time_bins_t$count, 5), family="poisson");
summary(mod2)
acf(mod$residuals)
pacf(mod$residuals)
mod2 = glm(data=ms_time_bins_t, formula=count ~ magval +
time_ms + dplyr::lag(ms_time_bins_t$count, 1) +
dplyr::lag(ms_time_bins_t$count, 2) +
dplyr::lag(ms_time_bins_t$count, 3) +
dplyr::lag(ms_time_bins_t$count, 4) +
dplyr::lag(ms_time_bins_t$count, 5), family="poisson");
summary(mod2)
acf(mod$residuals)
pacf(mod$residuals)
mod2 = glm(data=ms_time_bins_t, formula=count ~ magval +
time_ms + dplyr::lag(ms_time_bins_t$count, 1) +
dplyr::lag(ms_time_bins_t$count, 2) +
dplyr::lag(ms_time_bins_t$count, 3) +
dplyr::lag(ms_time_bins_t$count, 4) +
dplyr::lag(ms_time_bins_t$count, 5), family="poisson");
summary(mod2)
plot(mod$residuals)
pacf(mod$residuals, main='partial autocorrelation')
pacf(mod$residuals, main='partial autocorrelation')
acf(mod$residuals, main='autocorrelation')
data = rnorm(n = 1000, mean = 0, sd=1)
library(tidyverse)
plot(density(data))
data = rnorm(n = 10000, mean = 0, sd=1)
plot(density(data))
data = rnorm(n = 100000, mean = 0, sd=1)
plot(density(data))
data_div_2 = log2(2^data / 2)
plot(density(data_div_2))
data_mult_2 = log2(2^data * 2)
plot(density(data_mult_2))
draw_dist = function(m = 0) {
data = rnorm(n = 1000, mean = m, sd=1)
plot(density(data), col='blue')
data_div_2 = log2(2^data / 2)
points(density(data_div_2), col='green', t='l')
data_mult_2 = log2(2^data * 2)
points(density(data_mult_2), col='magenta', t='l')
}
draw_dist(0)
draw_dist(1)
draw_dist(2)
draw_dist(3)
draw_dist = function(m = 0) {
data = rnorm(n = 100000, mean = m, sd=1)
plot(density(data), col='blue')
data_div_2 = log2(2^data / 2)
points(density(data_div_2), col='green', t='l')
data_mult_2 = log2(2^data * 2)
points(density(data_mult_2), col='magenta', t='l')
}
draw_dist(3)
draw_dist(0)
abline(v=-1)
abline(v=1)
draw_dist = function(m = 0) {
data = rnorm(n = 100000, mean = m, sd=1)
plot(density(data), col='blue')
data_div_2 = log2( (2^data -1)  / 2)
points(density(data_div_2), col='green', t='l')
data_mult_2 = log2( (2^data -1) * 2)
points(density(data_mult_2), col='magenta', t='l')
}
draw_dist(1)
draw_dist = function(m = 0) {
data = rnorm(n = 100000, mean = m, sd=1)
plot(density(data), col='blue')
data_div_2 = log2( (2^data -1)  / 2 + 1)
points(density(data_div_2), col='green', t='l')
data_mult_2 = log2( (2^data -1) * 2 + 1)
points(density(data_mult_2), col='magenta', t='l')
}
draw_dist(1)
draw_dist(6)
knitr::opts_chunk$set(echo = TRUE)
vals = c(1, 2, 4, 8)
log2vals = log2(vals)
log2vals_plus1 = log2(vals+1)
plot(vals, log2vals)
points(vals, log2vals+1)
vals = c(1, 2, 4, 8)
log2vals = log2(vals)
log2vals_plus1 = log2(vals+1)
plot(vals, log2vals, yrange=c(0,4), t='b', col='blue')
points(vals, log2vals+1, t='b', col='green')
vals = c(1, 2, 4, 8)
log2vals = log2(vals)
log2vals_plus1 = log2(vals+1)
plot(vals, log2vals, ylim=c(0,4), t='b', col='blue')
points(vals, log2vals+1, t='b', col='green')
log2vals_plus1
log2vals
log2vals - log2vals_plus1
log2vals_plus1 - log2vals
vals = c(1, 2, 4, 8)
log2vals = log2(vals)
log2vals_plus1 = log2(vals+1)
plot(vals, log2vals, ylim=c(0,4), t='b', col='blue')
points(vals, log2vals_plus1, t='b', col='green')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data = read.table(gzfile("mouse.pair_stats_w_seq_error_counts.100k.txt.gz"), header=T, row.names=1)
setwd("/Users/bhaas/GITHUB/trinityrnaseq.misc_tests/examine_read_kmer_cov_vs_seq_errors/")
setwd("~/GITHUB/trinityrnaseq.misc_tests/examine_read_kmer_cov_vs_seq_errors/mouse")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data = read.table(gzfile("mouse.pair_stats_w_seq_error_counts.100k.txt.gz"), header=T, row.names=1)
df = data.frame(meanval = c(data$left_mean_cov, data$right_mean_cov),
medianval = c(data$left_median_cov, data$right_median_cov),
stdev = c(data$left_stdev, data$right_stdev),
num_errors = as.factor(c(data$left_errors, data$right_errors)) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0, 2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]]
num_errors_df = data[,c('left_errors', 'right_errors')]
head(num_errors_df)
df2 = head(num_errors_df)
df2
apply(df2, 1, mean)
apply(df2, 1, max)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = data$stdev,
num_errors = num_errors )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0, 2.5)
head(df)
table(df$num_errors)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = data$stdev,
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(x=stdev / meanval, y=log2(meanval), color=num_errors, fill=num_errors)) + geom_scatter(alpha=0.1)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(x=stdev / meanval, y=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim=(0, 4)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim=c(0, 4)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 4)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 2.5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data = read.table(gzfile("drosoph.pair_stats_w_seq_error_counts.100k.txt.gz"), header=T, row.names=1)
df = data.frame(meanval = c(data$left_mean_cov, data$right_mean_cov),
medianval = c(data$left_median_cov, data$right_median_cov),
stdev = c(data$left_stdev, data$right_stdev),
num_errors = as.factor(c(data$left_errors, data$right_errors)) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0, 2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = data$stdev,
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 2.5)
data = read.table(gzfile("ebola.pair_stats_w_seq_error_counts.100k.txt.gz"), header=T, row.names=1)
df = data.frame(meanval = c(data$left_mean_cov, data$right_mean_cov),
medianval = c(data$left_median_cov, data$right_median_cov),
stdev = c(data$left_stdev, data$right_stdev),
num_errors = as.factor(c(data$left_errors, data$right_errors)) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0, 2.5)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = data$stdev,
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10 & as.numeric(num_errors) > 0 ) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10 && as.numeric(num_errors) > 0 ) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 2 && as.numeric(num_errors) > 0 ) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 3 && as.numeric(num_errors) > 0 ) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 3 & as.numeric(num_errors) > 0 ) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 3 & as.numeric(num_errors) > 1 ) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
ladeda = df(n=num_errors, as.factor=num_errors)
ladeda = data.frame(n=num_errors, as.factor=num_errors)
head(ladeda)
ladeda = data.frame(n=num_errors, as.factor=num_errors, as.numeric=as.numeric(num_errors))
head(ladeda)
df %>% filter(as.numeric(num_errors) < 3 & as.numeric(num_errors) > 1 ) %>% head
df %>% filter(as.numeric(num_errors) == 3 | as.numeric(num_errors) == 1 ) %>% head
df %>% filter(num_errors == 3 | num_errors == 1 ) %>% head
df %>% mutate(number_errors = as.numeric(num_errors) %>% filter(number_errors < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 2.5)
df %>% mutate(number_errors = as.numeric(num_errors)) %>% filter(number_errors < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 2.5)
df %>% mutate(number_errors = as.numeric(num_errors)) %>% filter(number_errors < 3) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 2.5)
df %>% mutate(number_errors = as.numeric(num_errors)) %>% filter(number_errors < 4) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 2.5)
df %>% mutate(number_errors = as.numeric(num_errors)) %>% filter(number_errors == 4) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = num_errors)
df %>% filter(as.numeric(num_errors) < 3 & as.numeric(num_errors) > 1 ) %>% ggplot(aes(stdev / meanval, color=as.factor(num_errors), fill=as.factor(num_errors))) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = num_errors)
df %>% filter(num_errors >= 1 ) %>% ggplot(aes(stdev / meanval, color=as.factor(num_errors), fill=as.factor(num_errors))) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = num_errors)
df %>% filter(num_errors >= 1 ) %>% ggplot(aes(stdev / meanval, color=as.factor(num_errors), fill=as.factor(num_errors))) + geom_density(alpha=0.1)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = num_errors)
df %>% filter(num_errors >= 1 ) %>% ggplot(aes(stdev / meanval, color=as.factor(num_errors), fill=as.factor(num_errors))) + geom_density(alpha=0.1) + xlim(0,3.5)
df %>%  ggplot(aes(y=stdev / meanval, x=log2(meanval), color=as.factor(num_errors), fill=as.factor(num_errors))) + geom_point(alpha=0.1) + ylim(0, 2.5)
df %>%  filter(num_errors > 0) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=as.factor(num_errors), fill=as.factor(num_errors))) + geom_point(alpha=0.1) + ylim(0, 2.5)
e=ecdf(df$stdev)
plot(e)
e=ecdf(df$stdev/df$meanval)
plot(e)
plot(e, xlim=c(0.2))
plot(e, xlim=c(0,2))
e
cv = df$stdev/df$meanval
quantile(cv, prob=0.8)
setwd("~/GITHUB/trinityrnaseq.misc_tests/examine_read_kmer_cov_vs_seq_errors/mouse")
setwd("~/GITHUB/trinityrnaseq.misc_tests/examine_read_kmer_cov_vs_seq_errors/mouse")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data = read.table(gzfile("mouse.pair_stats_w_seq_error_counts.100k.txt.gz"), header=T, row.names=1)
df = data.frame(meanval = c(data$left_mean_cov, data$right_mean_cov),
medianval = c(data$left_median_cov, data$right_median_cov),
stdev = c(data$left_stdev, data$right_stdev),
num_errors = as.factor(c(data$left_errors, data$right_errors)) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0, 2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = data$stdev,
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 2.5)
quantile(df$stdev/df$meanval, prob=0.8)
quantile(df$stdev/df$meanval, prob=0.9)
quantile(df$stdev/df$meanval, prob=0.95)
quantile(df$stdev/df$meanval, prob=0.90)
quantile(df$stdev/df$meanval, prob=seq(0,1,0.01))
## examine quantiles for cv:
quantile(df$stdev/df$meanval, prob=seq(0,1,0.01))
setwd("~/GITHUB/trinityrnaseq.misc_tests/examine_read_kmer_cov_vs_seq_errors/drosoph")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data = read.table(gzfile("drosoph.pair_stats_w_seq_error_counts.100k.txt.gz"), header=T, row.names=1)
df = data.frame(meanval = c(data$left_mean_cov, data$right_mean_cov),
medianval = c(data$left_median_cov, data$right_median_cov),
stdev = c(data$left_stdev, data$right_stdev),
num_errors = as.factor(c(data$left_errors, data$right_errors)) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0, 2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = data$stdev,
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
num_errors_df = data[,c('left_errors', 'right_errors')]
num_errors = apply(num_errors_df, 1, max)
df = data.frame(meanval = data$mean_cov,
medianval = data$median_cov,
stdev = pmax(data$left_stdev, data$right_stdev),
num_errors = as.factor(num_errors) )
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(stdev / meanval, color=num_errors, fill=num_errors)) + geom_density(alpha=0.1) + xlim(0,2.5)
df %>% filter(as.numeric(num_errors) < 10) %>% ggplot(aes(y=stdev / meanval, x=log2(meanval), color=num_errors, fill=num_errors)) + geom_point(alpha=0.1) + ylim(0, 2.5)
quantile(df$stdev/df$meanval, prob=seq(0,1,0.01))
quantile(df$stdev/df$meanval, prob=seq(0,1,0.01))
